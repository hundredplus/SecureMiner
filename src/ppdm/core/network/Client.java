
package ppdm.core.network;

import java.io.*;
import java.math.BigInteger;
import java.net.*;
import java.util.*;
import ppdm.core.Config;
import ppdm.core.crypto.Paillier;
import ppdm.test.AutoGenerateData;
import ppdm.test.TestObject;

/**
 *
 * @author ductran
 *
 * @date Aug 29, 2008
 */
public class Client {    
    
    Socket clientSK = null;
    InputStream inStream;    
    OutputStream outStream;
    
    ObjectOutputStream objectOutputStream;
    ObjectInputStream   objectInputStream;
    
    public String projectID = "12345";
    public int myID = 1;
    public int direction = 0;
    public int num_party = 3;
    public String topology = "1 127.0.0.1 6868 2 127.0.0.1 6868 3 127.0.0.1 6868"; // TODO
    public int protocol = 1;    //1=spp
    public String database = "auto.txt";
    
    public void connect(String ip, int port) throws IOException, ClassNotFoundException{
        try {
            clientSK = new Socket(ip, port);
//            inStream = clientSK.getInputStream();
//            outStream = clientSK.getOutputStream();
            objectOutputStream = new ObjectOutputStream(clientSK.getOutputStream());
            objectInputStream  = new ObjectInputStream(clientSK.getInputStream());

//            BufferedReader br = new BufferedReader(new InputStreamReader(inStream));
//            BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(outStream));
//            
            System.out.println("preparing data ...");
            String sendData = "@config ";
            //@config
            sendData += projectID + Config.SPACE;
            sendData += myID + Config.SPACE;
            sendData += direction + Config.SPACE;
            sendData += num_party + Config.SPACE;
            sendData += topology + Config.SPACE;
            sendData += protocol + Config.SPACE;
            sendData += Config.VECTOR_SIZE + Config.SPACE;
            sendData += database + Config.SPACE;
            
            Paillier pail = new Paillier();
            sendData += pail.n + Config.SPACE + pail.g + Config.SPACE + Config.ENTER;
            
            TestObject  obj = new TestObject();
            obj.setSend(sendData);
            obj.setRate(2349.9);
//            bw.write(sendData);
//            bw.flush();
           
            objectOutputStream.writeObject(obj);
            objectOutputStream.flush();
           
             
             
            sendData = "@data ";
            AutoGenerateData agd = new AutoGenerateData(Config.VECTOR_SIZE);
            agd.encryptData(pail);
            
            for (int i=0; i< Config.VECTOR_SIZE; i++){
                sendData += agd.getEncPrivateVectorData()[i] + Config.SPACE;
            }
            sendData += Config.ENTER;

            obj = new TestObject();
            obj.setSend(sendData);
            
            objectOutputStream.writeObject(obj);
            objectOutputStream.flush();
           
//            bw.write(sendData);
//            bw.flush();
            
            
            obj = new TestObject();
            sendData = "@end" + Config.ENTER;
           
            obj.setSend(sendData);
            obj.setRate(234444.6);
            objectOutputStream.writeObject(obj);
            objectOutputStream.flush();
            
//            bw.write(sendData);
//            bw.flush();
            
                   
           
            TestObject to;
            String mess;
            while (true){
           
                to = (TestObject)objectInputStream.readObject();
                mess = to.getSend();
                System.out.println("Mess:"  + mess);
                System.out.println("Rate:"  + to.getRate());
                mess = mess.trim();
                if (mess.contains("EndData")) break;
            }
            
            StringTokenizer st = new StringTokenizer(mess);
            while (st.hasMoreTokens()){
                if (st.nextToken().equalsIgnoreCase("BeginData"))
                    break;
            }
            
            BigInteger portion = new BigInteger(st.nextToken().trim());
            portion = pail.decrypt(portion);
            System.out.println("Your portion: " + portion);
//            bw.close();
//            br.close();
            objectInputStream.close();
            objectOutputStream.close();
            clientSK.close();
            
            
        } catch (UnknownHostException e) {
            System.err.println("Don't know about host: hostname");
        } catch (IOException e) {
            System.err.println("Couldn't get I/O for the connection to: hostname " + e.toString());
        }
        finally {
            if (clientSK != null) clientSK.close( );
        }
    }
    
    public static  void main(String[] args) throws IOException, ClassNotFoundException{
        Client cl = new Client();
        cl.connect("127.0.0.1", 6868);
    }
    
}
